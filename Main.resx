<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAL1OAAC9TgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoMDQAEBQUAPk1VAGZ/iwBngY0AZ4GNAGeBjQBngY0AZ4GNAGeB
        jQBngY0AZ4GNAGeBjQBngY0AZ4GNAGeBjQBngY0AZ4GNAGeBjQBngY0AZ4GNAGeBjQBngY0AZ4GNAGeB
        jQBngY0AZn+LAD5NVQAEBQUACgwNAAAAAAAAAAAAAAAAAAAAAAMdJCcmJC0yOiQtMjkkLTI5JC0yOSQt
        MjkkLTI5JC0yOSQtMjkkLTI5JC0yOSQtMjkkLTI5JC0yOSQtMjkkLTI5JC0yOSQtMjkkLTI5JC0yOSQt
        MjkkLTI5JC0yOSQtMjkkLTI6HSQoJgAAAAMAAAAAAAAAAAAAAAA6SE8AOEZMLkBQV8tCUlroQlJa50JS
        WudCUlrnQlJa50JSWudCUlrnQlJa50JSWudCUlrnQlJa50JSWudCUlrnQlJa50JSWudCU1rnQlNb50JT
        W+dCU1rnQlNb50JTW+dCUlrnQlJa50JSWuhAUFfKOEZMLjpITwAAAAAAAAAAAERVXQBDVFtaRFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RT
        Wv9BQ0j/Q09V/0VUXP9BREn/Q01T/0RWXv9EVV3/RFVd/0RVXf9DU1taRFVdAAAAAAAAAAAARFVdAENU
        XFxEVV3+RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVl7/Q0xS/zcoKf9AQUb/RFBX/zgpKv8+PED/RVZe/0RVXf9EVV3/RFVd/kNUXFxEVV0AAAAAAAAA
        AABEVV0AQ1RcXERVXf5EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0VWXv9DS1H/Nygp/0BBRf9FT1b/OCkq/z48P/9FVl7/RFVd/0RVXf9EVV3+Q1RcXERV
        XQAAAAAAAAAAAERVXQBDVFxcRFVd/kRVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVl7/QUVK/zsyNP82Jyf/Oi8x/zw0Nv82Jyj/OS0u/z88QP9FU1v/RFVd/0RV
        Xf5DVFxcRFVdAAAAAAAAAAAARFVdAENUXFxEVV3+RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/Q1Nb/0VUXP89ODv/NiQl/zYmJ/82Jib/NiUm/zYmJ/82JSb/OSwt/0VQ
        V/9DU1r/RFVd/kNUXFxEVV0AAAAAAAAAAABEVV0AQ1RcXERVXf5EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0NTW/87Nzr/Pj1B/z44O/82JSb/NiYn/zYmJ/82Jif/NiYn/zYm
        J/86LS//QUNI/zkyNP9CTFL+Q1VdXERVXQAAAAAAAAAAAERVXQBDVFxcRFVd/kRVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/QlBX/zgrLf86MjX/PTc6/zYlJv82Jif/NiYn/zYm
        J/82Jif/NiYn/zktL/8+PD//NiYn/z9GS/5EVl5cRFVdAAAAAAAAAAAARFVdAENUXFxEVV3+RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9CUFf/OCwu/zozNv89Nzr/NiUm/zYm
        J/82Jif/NiYn/zYmJ/82Jif/OS0v/z48QP82Jyj/QUdN/kRWXlxEVV0AAAAAAAAAAABEVV0AQ1RcXERV
        Xf5EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0JQV/84Ky3/OjM1/z03
        Ov82JSb/NiYn/zYmJ/82Jif/NiYn/zYlJv85LS//Pjs//zYmJ/9ARkz+RFZeXERVXQAAAAAAAAAAAERV
        XQBDVFxcRFVd/kRVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/Q1JZ/zox
        M/88ODv/Pjo+/zcpKv84KSv/OCkr/zgpK/84KSv/OCkq/zswMv9AQET/OCss/0FJT/5DVl5cRFVdAAAA
        AAAAAAAARFVdAENUXFxEVV3+RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/Q05V/0NQV/9CSE7/P0BE/z9ARP8/QET/QEBF/z9ARP8/QET/QUNI/0RRWP9CTVP/RFRb/kNU
        XFxEVV0AAAAAAAAAAABEVV0AQ1RcXERVXf5EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFZe/z5ARf82KCr/OC8y/zYpK/82KCn/Ny4w/zcqLP86Mzb/RFNb/0RW
        Xv9EVV3+Q1RcXERVXQAAAAAAAAAAAERVXQBDVFxcRFVd/kRVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/Q09W/zo0N/86ODz/Nicp/zUlJf84Mzf/OTM2/0BG
        S/9EVV3/RFVd/0RVXf5DVFxcRFVdAAAAAAAAAAAARFVdAENUXFxEVV3+RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/Qk5V/z07Pv87Mzb/OjE0/zw3
        Ov9BR0z/RFVd/0RVXf9EVV3/RFVd/kNUXFxEVV0AAAAAAAAAAABEVV0AQ1RcXERVXf5EVV3/RFVd/0RU
        W/9EVFv/RFVd/0RVXf9DUln/QlJZ/0JSWf9DVFz/RFVd/0RVXf9EVV3/RFVd/0RVXf9DUln/Q1Ja/0RU
        XP9DU1v/RFRc/0RQV/9EVV3/RFVd/0RVXf9EVV3+Q1RcXERVXQAAAAAAAAAAAERVXQBDVFxcRFVd/kRV
        Xf9DUlr/Olxr/zpcav9DUln/Q1Zf/zldbf83XnD/N15v/z9YZP9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf5DVFxcRFVdAAAAAAAAAAAARFVdAENU
        XFxEVV3+RFRc/ztkdv8qlsP/KZjH/zdqf/9CW2b/NoKk/zSJrv80iK3/Pmd6/0RUXP9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/kNUXFxEVV0AAAAAAAAA
        AABEVV0AQ1RcXERVXf5EVFz/OmJ0/yqTv/8oodP/M4er/0JbZv82g6T/NImv/zSJrv8+aHr/RFRc/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3+Q1RcXERV
        XQAAAAAAAAAAAERVXQBDVFxcRFVd/kRVXf8yh6v/J6DT/yqTwP87Y3X/Qltm/zaDpP80ia//NImu/z5o
        ev9EVFz/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf5DVFxcRFVdAAAAAAAAAAAARFVdAENUXFxEVV3+RFRc/zxvhv8snMz/LZnH/z5neP9CW2b/NoOk/zSJ
        rv80iK3/Pmd6/0RUXP9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/kNUXFxEVV0AAAAAAAAAAABEVV0AQ1RcXERVXf5EVV3/RFRb/0Bjcv9AY3L/RFRc/0NX
        YP8/ZXb/Pmh6/z5nev9CXGf/RFVc/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3+Q1RcXERVXQAAAAAAAAAAAEhZYQBJWmJZRlZe/0RVXf9EVV3/RFVc/0RV
        XP9EVV3/RFVd/0RUXP9FVFz/RVRc/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RVXf9EVV3/RFVd/0RV
        Xf9EVV3/RFVd/0RVXf9EVV3/RFVd/0ZWXv9JWmJZSFlhAAAAAAAAAAAAU2NrAFRkayZQYGi/T19m4k9f
        ZuBPX2bgT19m4E9fZuBPX2bgT19m4E9fZuBPX2bgT19m4E9fZuBPX2bgT19m4E9fZuBPX2bgT19m4E9f
        ZuBPX2bgT19m4E9fZuBPX2bgT19m4E9fZuBPX2biUGBov1RkayZTY2sAAAAAAAAAAAA7TFMAT19mAFlp
        cBBZaG8fWWhvH1lobx9ZaG8fWWhvH1lobx9ZaG8fWWhvH1lobx9ZaG8fWWhvH1lobx9ZaG8fWWhvH1lo
        bx9ZaG8fWWhvH1lobx9ZaG8fWWhvH1lobx9ZaG8fWWhvH1lobx9ZaXAQTmBnADpPVwAAAAAAAAAAAFVl
        bABTZGsAVmZtAFZmbQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZm
        bQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZmbQBWZm0AVmZtAFZmbQBVYmgAVWRsAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////4AAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAAB//////////8=
</value>
  </data>
</root>